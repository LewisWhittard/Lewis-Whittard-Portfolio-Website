// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LWMDev_UI_Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SearchPageFeature : object, Xunit.IClassFixture<SearchPageFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SearchPage", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SearchPage.feature"
#line hidden
        
        public SearchPageFeature(SearchPageFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Click search on the navigation bar")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchPage")]
        [Xunit.TraitAttribute("Description", "Click search on the navigation bar")]
        [Xunit.InlineDataAttribute("chrome", new string[0])]
        [Xunit.InlineDataAttribute("firefox", new string[0])]
        [Xunit.InlineDataAttribute("edge", new string[0])]
        [Xunit.InlineDataAttribute("safari", new string[0])]
        public async System.Threading.Tasks.Task ClickSearchOnTheNavigationBar(string browser, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("browser", browser);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Click search on the navigation bar", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
    await testRunner.GivenAsync(string.Format("SearchPage: I use Browser \"{0}\"", browser), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 5
    await testRunner.WhenAsync("SearchPage: I go to \"https://localhost:44325/search\" and use the search button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 6
    await testRunner.ThenAsync("SearchPage: the page title is \"Search - Lewis Whittard Software Development\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Click home on the navigation bar")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchPage")]
        [Xunit.TraitAttribute("Description", "Click home on the navigation bar")]
        [Xunit.InlineDataAttribute("chrome", new string[0])]
        [Xunit.InlineDataAttribute("firefox", new string[0])]
        [Xunit.InlineDataAttribute("edge", new string[0])]
        [Xunit.InlineDataAttribute("safari", new string[0])]
        public async System.Threading.Tasks.Task ClickHomeOnTheNavigationBar(string browser, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("browser", browser);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Click home on the navigation bar", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
        await testRunner.GivenAsync(string.Format("SearchPage: I use Browser \"{0}\"", browser), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 17
        await testRunner.WhenAsync("SearchPage: I go to \"https://localhost:44325/search\" and use the home button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
        await testRunner.ThenAsync("SearchPage: the page title is \"Home Page - Lewis Whittard Software Development\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Click Linkedin button")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchPage")]
        [Xunit.TraitAttribute("Description", "Click Linkedin button")]
        [Xunit.InlineDataAttribute("chrome", new string[0])]
        [Xunit.InlineDataAttribute("firefox", new string[0])]
        [Xunit.InlineDataAttribute("edge", new string[0])]
        [Xunit.InlineDataAttribute("safari", new string[0])]
        public async System.Threading.Tasks.Task ClickLinkedinButton(string browser, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("browser", browser);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Click Linkedin button", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 28
        await testRunner.GivenAsync(string.Format("SearchPage: I use Browser \"{0}\"", browser), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 29
        await testRunner.WhenAsync("SearchPage: I go to \"https://localhost:44325/search\" and use the Linkedin button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
        await testRunner.ThenAsync("SearchPage: I have arrived at linkedin", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Click logo on the navigation bar")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchPage")]
        [Xunit.TraitAttribute("Description", "Click logo on the navigation bar")]
        [Xunit.InlineDataAttribute("chrome", new string[0])]
        [Xunit.InlineDataAttribute("firefox", new string[0])]
        [Xunit.InlineDataAttribute("edge", new string[0])]
        [Xunit.InlineDataAttribute("safari", new string[0])]
        public async System.Threading.Tasks.Task ClickLogoOnTheNavigationBar(string browser, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("browser", browser);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Click logo on the navigation bar", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 40
        await testRunner.GivenAsync(string.Format("SearchPage: I use Browser \"{0}\"", browser), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 41
        await testRunner.WhenAsync("SearchPage: I go to \"https://localhost:44325/search\" and use the logo button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
        await testRunner.ThenAsync("SearchPage: the page title is \"Home Page - Lewis Whittard Software Development\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="I go to the search page")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchPage")]
        [Xunit.TraitAttribute("Description", "I go to the search page")]
        [Xunit.InlineDataAttribute("chrome", new string[0])]
        [Xunit.InlineDataAttribute("firefox", new string[0])]
        [Xunit.InlineDataAttribute("edge", new string[0])]
        [Xunit.InlineDataAttribute("safari", new string[0])]
        public async System.Threading.Tasks.Task IGoToTheSearchPage(string browser, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("browser", browser);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("I go to the search page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
        await testRunner.GivenAsync(string.Format("SearchPage: I use Browser \"{0}\"", browser), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
        await testRunner.WhenAsync("SearchPage: I go to \"https://localhost:44325/search\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
        await testRunner.ThenAsync("SearchPage: all search items should be visible", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="I go to the search page and search with no tick boxes")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchPage")]
        [Xunit.TraitAttribute("Description", "I go to the search page and search with no tick boxes")]
        [Xunit.InlineDataAttribute("chrome", new string[0])]
        [Xunit.InlineDataAttribute("firefox", new string[0])]
        [Xunit.InlineDataAttribute("edge", new string[0])]
        [Xunit.InlineDataAttribute("safari", new string[0])]
        public async System.Threading.Tasks.Task IGoToTheSearchPageAndSearchWithNoTickBoxes(string browser, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("browser", browser);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("I go to the search page and search with no tick boxes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 65
    await testRunner.GivenAsync(string.Format("SearchPage: I use Browser \"{0}\"", browser), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 66
    await testRunner.WhenAsync("SearchPage: I go to \"https://localhost:44325/search\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
    await testRunner.AndAsync("SearchPage: I untick all the search boxes and search", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
    await testRunner.ThenAsync("SearchPage: No search items should be visible", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="I go to the search page and search with all tick boxes")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchPage")]
        [Xunit.TraitAttribute("Description", "I go to the search page and search with all tick boxes")]
        [Xunit.InlineDataAttribute("chrome", new string[0])]
        [Xunit.InlineDataAttribute("firefox", new string[0])]
        [Xunit.InlineDataAttribute("edge", new string[0])]
        [Xunit.InlineDataAttribute("safari", new string[0])]
        public async System.Threading.Tasks.Task IGoToTheSearchPageAndSearchWithAllTickBoxes(string browser, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("browser", browser);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("I go to the search page and search with all tick boxes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 78
    await testRunner.GivenAsync(string.Format("SearchPage: I use Browser \"{0}\"", browser), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 79
    await testRunner.WhenAsync("SearchPage: I go to \"https://localhost:44325/search\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 80
    await testRunner.AndAsync("SearchPage: and search", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
    await testRunner.ThenAsync("SearchPage: all search items should be visible", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="I go to the search page and search with all tick boxes and click a search result")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchPage")]
        [Xunit.TraitAttribute("Description", "I go to the search page and search with all tick boxes and click a search result")]
        [Xunit.InlineDataAttribute("chrome", "SearchResultButton 0", "https://localhost:44325/ClusterContent/Index/0", new string[0])]
        [Xunit.InlineDataAttribute("firefox", "SearchResultButton 1", "https://localhost:44325/ClusterContent/Index/1", new string[0])]
        [Xunit.InlineDataAttribute("edge", "SearchResultButton 2", "https://localhost:44325/ClusterContent/Index/2", new string[0])]
        [Xunit.InlineDataAttribute("safari", "SearchResultButton 3", "https://localhost:44325/ClusterContent/Index/3", new string[0])]
        [Xunit.InlineDataAttribute("chrome", "SearchResultButton 4", "https://localhost:44325/ClusterContent/Index/4", new string[0])]
        public async System.Threading.Tasks.Task IGoToTheSearchPageAndSearchWithAllTickBoxesAndClickASearchResult(string browser, string searchResult, string expectedURL, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("browser", browser);
            argumentsOfScenario.Add("SearchResult", searchResult);
            argumentsOfScenario.Add("ExpectedURL", expectedURL);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("I go to the search page and search with all tick boxes and click a search result", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 91
  await testRunner.GivenAsync(string.Format("SearchPage: I use Browser \"{0}\"", browser), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 92
  await testRunner.WhenAsync("SearchPage: I go to \"https://localhost:44325/search\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 93
  await testRunner.AndAsync("SearchPage: and search", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 94
  await testRunner.ThenAsync(string.Format("SearchPage: I click a \"{0}\" result and go through to the page \"{1}\"", searchResult, expectedURL), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await SearchPageFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await SearchPageFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
